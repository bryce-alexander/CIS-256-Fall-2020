In a plain-text file called GRADER, suggest (in simple English) how you could
use depth-first search to generate a random maze (or more importantly, lots of
different random mazes), without using disjoint sets at all.

(a) How would your algorithm ensure that there is a path between every pair of
cells, but no more than one path between any pair of cells (i.e., no
cycles)?

(b) How does your algorithm use random numbers to generate a different maze
each time? Specifically, what decision should be made by random numbers
at each recursive invocation of the depth-first search method?

---------------------------------------------------------------------------------------------------------

One might use depth first search to generate a random maze by starting with a maze template (such as we
created where all walls are intact), traverses the cells, delete the wall and perform a union
when a cell is not marked as visited.  If the wall is marked as visited, do nothing and continue the
recursion.

If one were to leave the DFS method as it currently stands, we would end up with the same
maze every time given the same cell parameters.  For this reason, it would be best to use a random
number to determine which direction (up, down, left, right) the traversal will continue to next.
